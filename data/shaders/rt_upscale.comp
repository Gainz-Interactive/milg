#version 460

#include "common.glsl"

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

layout(rgba16f, set = 0, binding = 0) uniform readonly image2D in_image;

layout(rgba16f, set = 0, binding = 1) uniform writeonly image2D out_image;

layout(push_constant) uniform PushConstants {
    float sample_num;
    float distribution_bias;
    float pixel_multiplier;
    float inverse_hue_tolerance;
} push_constants;

#define pow(a,b) pow(max(a, 0.0), b)
mat2 sample_mat = mat2(cos(GOLDEN_ANGLE), sin(GOLDEN_ANGLE), -sin(GOLDEN_ANGLE), cos(GOLDEN_ANGLE));

vec3 denoise_lightmap(in vec2 uv, in ivec2 image_size) {
    vec3 denoised = vec3(0.0);

    const float sample_radius = sqrt(push_constants.sample_num);
    const float sample_true_radius = 0.5 / (sample_radius * sample_radius);
    vec2 sample_pixel = vec2(1.0 / image_size.x, 1.0 / image_size.y);
    vec3 sample_center = imageLoad(in_image, ivec2(uv * image_size)).rgb;
    vec3 sample_center_norm = normalize(sample_center);
    float sample_center_sat = length(sample_center);

    float influence_sum = 0.0;
    float brightness_sum = 0.0;

    vec2 pixel_rotated = vec2(0.0, 1.0);

    for (float x = 0.0; x <= push_constants.sample_num; x++) {
        pixel_rotated *= sample_mat;

        vec2 pixel_offset = push_constants.pixel_multiplier * pixel_rotated * sqrt(x) * 0.5;
        float pixel_influence = 1.0 - sample_true_radius * pow(dot(pixel_offset, pixel_offset), push_constants.distribution_bias);
        pixel_offset *= sample_pixel;

        vec3 denoised_color =
            imageLoad(in_image, ivec2((uv + pixel_offset) * image_size)).rgb;

        pixel_influence *= pixel_influence * pixel_influence;
        pixel_influence *=
            pow(0.5 + 0.5 * dot(sample_center_norm, normalize(denoised_color)), push_constants.inverse_hue_tolerance)
                * pow(1.0 - abs(length(denoised_color) - length(sample_center_sat)), 8.);

        influence_sum += pixel_influence;
        denoised += denoised_color * pixel_influence;
    }

    return denoised / influence_sum;
}

void main() {
    ivec2 sample_pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(sample_pos + vec2(0.5)) / vec2(imageSize(in_image));
    vec4 lightmap = vec4(denoise_lightmap(uv, imageSize(in_image)), 1.0);

    imageStore(out_image, sample_pos, lightmap);
}
